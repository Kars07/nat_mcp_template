# Complete Deployment Files for Render

Copy each section below into separate files in your project root.

---

## File 1: `Dockerfile.server`

```dockerfile
# Use Python 3.11 slim image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy project files
COPY pyproject.toml .
COPY pdf_reader/ ./pdf_reader/
COPY llm_summarizer/ ./llm_summarizer/
COPY mcp/ ./mcp/

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    cd pdf_reader && pip install --no-cache-dir -e . && cd .. && \
    cd llm_summarizer && pip install --no-cache-dir -e . && cd .. && \
    pip install --no-cache-dir -e . && \
    pip install --no-cache-dir PyMuPDF python-multipart

# Expose port
EXPOSE 9901

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:9901/health')" || exit 1

# Start command
CMD ["sh", "-c", "nat serve --config mcp/mcp-server-config.yml --host 0.0.0.0 --port ${PORT:-9901}"]
```

---

## File 2: `requirements.txt`

```txt
# Core dependencies
nvidia-nat[langchain]>=1.2.0
aiqtoolkit>=1.2.0

# Web framework
fastapi
uvicorn[standard]

# PDF processing
PyMuPDF

# Additional utilities
python-multipart
pydantic>=2.0.0
python-dotenv

# Optional: for better performance
uvloop

# Development (optional)
pytest
black
isort
flake8
```

---

## File 3: `.env.example`

```bash
# NVIDIA API Configuration
NVIDIA_API_KEY=your_nvidia_api_key_here

# Server Configuration
HOST=0.0.0.0
PORT=9901

# MCP Client Configuration (if deploying client)
MCP_SERVER_URL=https://your-mcp-server.onrender.com

# Python Configuration
PYTHONUNBUFFERED=1

# Logging
LOG_LEVEL=INFO

# Optional: Database (if needed in future)
# DATABASE_URL=postgresql://user:password@host:port/dbname

# Optional: Redis (for caching)
# REDIS_URL=redis://host:port
```

---

## File 4: `render.yaml`

```yaml
services:
  # MCP Server Service
  - type: web
    name: mcp-server
    env: python
    region: oregon
    plan: starter
    buildCommand: |
      pip install --upgrade pip
      cd pdf_reader && pip install -e . && cd ..
      cd llm_summarizer && pip install -e . && cd ..
      pip install -e .
      pip install PyMuPDF python-multipart
    startCommand: |
      nat serve --config mcp/mcp-server-config.yml --host 0.0.0.0 --port $PORT
    envVars:
      - key: NVIDIA_API_KEY
        sync: false
      - key: PORT
        value: 9901
      - key: HOST
        value: 0.0.0.0
      - key: PYTHONUNBUFFERED
        value: "1"
    healthCheckPath: /health

  # MCP Client Service (Optional - for testing)
  - type: web
    name: mcp-client
    env: python
    region: oregon
    plan: starter
    buildCommand: |
      pip install --upgrade pip
      cd pdf_reader && pip install -e . && cd ..
      cd llm_summarizer && pip install -e . && cd ..
      pip install -e .
      pip install PyMuPDF python-multipart
    startCommand: |
      nat serve --config mcp/mcp-client-config.yml --host 0.0.0.0 --port $PORT
    envVars:
      - key: NVIDIA_API_KEY
        sync: false
      - key: MCP_SERVER_URL
        fromService:
          type: web
          name: mcp-server
          envVarKey: RENDER_EXTERNAL_URL
      - key: PORT
        value: 10000
      - key: HOST
        value: 0.0.0.0
      - key: PYTHONUNBUFFERED
        value: "1"
    healthCheckPath: /health
```

---

## File 5: `mcp/mcp-server-config-production.yml`

```yaml
# PDF Summarizer MCP Server Configuration for Render
functions:
  read_pdf:
    _type: pdf_reader
    description: "Reads a PDF file and extracts text content"
    max_pages: null

  summarize_text:
    _type: llm_summarizer
    llm_name: summarizer_llm
    description: "Generates a detailed summary with key points"
    max_summary_length: 500
    include_key_points: true
    summary_style: "comprehensive"

llms:
  summarizer_llm:
    _type: nim
    model_name: nvidia/nvidia-nemotron-nano-9b-v2
    api_key: ${NVIDIA_API_KEY}
    temperature: 0.3
    max_tokens: 2048

workflow:
  _type: react_agent
  description: "AI agent that reads and summarizes PDF documents"
  tool_names:
    - read_pdf
    - summarize_text
  llm_name: summarizer_llm
  verbose: true
  parse_agent_response_max_retries: 3
  max_tool_calls: 15

general:
  front_end:
    _type: mcp
    name: "PDF Summarizer MCP Server"
    host: ${HOST:-0.0.0.0}
    port: ${PORT:-9901}
    debug: false
    log_level: "INFO"
    transport: "sse"
    tool_names: []
  
  logging:
    console:
      _type: console
      level: INFO
```

---

## File 6: `.gitignore` (Add if not exists)

```
# Environment variables
.env
.env.local

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
ENV/
env/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
```

---

## Quick Setup Script

Create a file called `setup_deployment.sh`:

```bash
#!/bin/bash

# Create deployment files
echo "Creating deployment files..."

# Create .env from example
if [ ! -f .env ]; then
    cp .env.example .env
    echo "Created .env file - please update with your API keys"
fi

# Update mcp-server-config.yml to use production config
echo "Remember to update your start commands to use production config if needed"

# Git setup
git add Dockerfile.server requirements.txt .env.example render.yaml .gitignore
git commit -m "Add Render deployment configuration"

echo "Deployment files ready! Next steps:"
echo "1. Update .env with your NVIDIA_API_KEY"
echo "2. Push to GitHub: git push origin main"
echo "3. Go to render.com and deploy using Blueprint"
```

Make it executable:
```bash
chmod +x setup_deployment.sh
./setup_deployment.sh
```

---

## Installation Instructions

1. **Copy each file above to your project root**
2. **Update the start command in render.yaml** if you want to use the production config:
   - Change `mcp/mcp-server-config.yml` to `mcp/mcp-server-config-production.yml`
3. **Add your NVIDIA API key** to `.env` for local testing
4. **Commit and push** to GitHub
5. **Deploy** using Render Blueprint

That's it! All files are ready to copy and paste.